(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(0),n(89)),o={id:"key_mgmt",title:"Key Management"},c={unversionedId:"key_mgmt",id:"key_mgmt",isDocsHomePage:!1,title:"Key Management",description:"Relevant reference//docs.rs/lightning/0.0.12/lightning/chain/keysinterface/struct.KeysManager.html",source:"@site/docs/key_mgmt.md",slug:"/key_mgmt",permalink:"/lightningdevkit.org/docs/key_mgmt",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/key_mgmt.md",version:"current",sidebar:"someSidebar",previous:{title:"Opening a Channel with LDK",permalink:"/lightningdevkit.org/docs/open_channel"},next:{title:"Blockchain Data",permalink:"/lightningdevkit.org/docs/blockdata"}},s=[],l={toc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Relevant reference: ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.rs/lightning/0.0.12/lightning/chain/keysinterface/struct.KeysManager.html"}),"https://docs.rs/lightning/0.0.12/lightning/chain/keysinterface/struct.KeysManager.html")),Object(i.b)("p",null,"LDK Private Key Information is primarily provided through the ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::KeysInterface")," trait. It includes a few basic methods to get public and private key information, as well as a method to get an instance of a second trait which provides per-channel information - ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::ChannelKeys"),". While a custom ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," implementation allows simple flexibility to control derivation of private keys, ",Object(i.b)("inlineCode",{parentName:"p"},"ChannelKeys")," focuses on signing lightning transactions and is primarily useful if you want to store private key material on a separate device which enforces lightning protocol details.\nA simple implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," is provided in the form of ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::KeysManager"),", see its documentation for more details on its key derivation. It uses ",Object(i.b)("inlineCode",{parentName:"p"},"chain::keysinterface::InMemoryChannelKeys")," for channel signing, which is likely an appropriate signer for custom ",Object(i.b)("inlineCode",{parentName:"p"},"KeysInterface")," implementations as well.\nA ",Object(i.b)("inlineCode",{parentName:"p"},"KeysManager")," can be constructed simply with only a 32-byte seed and some integers which ensure uniqueness across restarts (defined as ",Object(i.b)("inlineCode",{parentName:"p"},"starting_time_secs")," and ",Object(i.b)("inlineCode",{parentName:"p"},"starting_time_nanos"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"let mut random_32_bytes = [0; 32];\n// Fill in random_32_bytes with secure random data, or, on restart, reload the seed from disk.\nlet start_time = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH).unwrap();\nlet keys_interface_impl = lightning::chain::keysinterface::KeysManager::new(random_32-bytes, bitcoin::network::constants::Network::Bitcoin, start_time.as_secs(), start_time.subsec_nanos());\n")))}p.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?a.a.createElement(f,c(c({ref:t},l),{},{components:n})):a.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);